@startuml class-diagram
  class "Settings" as Settings {
    {static} +init()
    {static} +admin_init()
    {static} +render_section(args)
    {static} +render_fields(args)
    {static} +sanitize_text_field(fields)
  }
  class "Option" as Option {
    +value : string
    +__construct(key)
    +get()
  }
  class "Plugin" as Plugin {
    -file : string
    -__construct(file)
    {static} +init(file)
    +plugins_loaded()
    +block_init()
    +dirname(path)
    +plugin_dir_url()
  }
  class "AdminWidget" as AdminWidget {
    #api_status_service : ApiStatusService
    +__construct(api_status_service)
    {static} +init(api_status_service)
    +add_dashboard_widget()
    +render()
  }
  class "OptionsPage" as OptionsPage {
    {static} +init()
    {static} +admin_menu()
    {static} +render_page()
    {static} +add_settings_error(arr)
  }
  package Integration as Integration {
    class "EstimatedPrice" as Integration_EstimatedPrice {
      +set(amount, currency_from, currency_to)
      +get()
    }
    enum "EndpointMethods" as Integration_EndpointMethods {
    }
    class "Payment" as Integration_Payment {
      +set(price_amount, price_currency, pay_currency, optional_params)
      +post()
    }
    class "AvailableCurrencies" as Integration_AvailableCurrencies {
      +get()
    }
    class "MinimumPaymentAmount" as Integration_MinimumPaymentAmount {
      +set(currency_from, currency_to)
      +get()
    }
    class "ApiStatus" as Integration_ApiStatus {
      +get()
    }
    class "PaymentStatus" as Integration_PaymentStatus {
      +set(payment_id)
      +get()
    }
  }
  package Logs as Logs {
    class "StructuredLogsFormatter" as Logs_StructuredLogsFormatter {
      +format(record)
    }
    class "ApplicationLogs" as Logs_ApplicationLogs {
      #logger : LoggerInterface
      -__construct(logger)
      {static} +init(logger)
      +http_api_debug(response, context, transport, parsed_args, url)
    }
  }
  package Services as Services {
    class "ApiStatusService" as Services_ApiStatusService {
      -api_status : ApiStatus
      +__construct(api_status)
      +get_data()
    }
    class "AvailableCurrenciesService" as Services_AvailableCurrenciesService {
      -available_currencies : AvailableCurrencies
      +__construct(available_currencies)
      #get_data()
      +is_available(currency)
    }
  }
  package Rest as Rest {
    interface "EndpointGetInterface" as Rest_EndpointGetInterface {
      +get()
    }
    class "Response" as Rest_Response {
      #response : string[]
      +__construct(response)
      +get()
    }
    interface "EndpointInterface" as Rest_EndpointInterface {
      +get_client()
    }
    interface "EndpointPostInterface" as Rest_EndpointPostInterface {
      +post()
    }
    class "Error" as Rest_Error {
      #error : WP_Error
      +__construct(error)
      +get()
    }
    class "Endpoint" as Rest_Endpoint {
      -header : string[]
      -body : string[]
      #client : Client
      +__construct(client)
      +get_client()
      #get_headers()
      #set_header(params)
      #get_body()
      #set_body(params)
      +__call(name, arguments)
    }
    class "Api" as Rest_Api {
      -environment : string
      -__construct(environment)
      {static} +create()
      +get_service_url()
      +get(method)
      +info()
    }
    interface "ResponseInterface" as Rest_ResponseInterface {
      +get()
    }
    class "Client" as Rest_Client {
      -service : Api
      +__construct(service)
      +get_service()
      +get(endpoint, body, headers)
      +post(endpoint, body, headers)
    }
  }
  AdminWidget ..> AdminWidget
  AdminWidget ..> Services_ApiStatusService
  Integration_ApiStatus ..> Integration_EndpointMethods
  Integration_ApiStatus ..> Rest_ResponseInterface
  Integration_AvailableCurrencies ..> Integration_EndpointMethods
  Integration_AvailableCurrencies ..> Rest_ResponseInterface
  Integration_EstimatedPrice ..> Integration_EndpointMethods
  Integration_EstimatedPrice ..> Rest_EndpointGetInterface
  Integration_EstimatedPrice ..> Rest_ResponseInterface
  Integration_MinimumPaymentAmount ..> Integration_EndpointMethods
  Integration_MinimumPaymentAmount ..> Rest_EndpointGetInterface
  Integration_MinimumPaymentAmount ..> Rest_ResponseInterface
  Integration_Payment ..> Integration_EndpointMethods
  Integration_Payment ..> Rest_EndpointPostInterface
  Integration_Payment ..> Rest_ResponseInterface
  Integration_PaymentStatus ..> Integration_EndpointMethods
  Integration_PaymentStatus ..> Rest_EndpointGetInterface
  Integration_PaymentStatus ..> Rest_ResponseInterface
  Logs_ApplicationLogs ..> Logs_ApplicationLogs
  OptionsPage ..> Plugin
  OptionsPage ..> Settings
  Plugin ..> Plugin
  Rest_Api ..> Rest_Api
  Rest_Client ..> Rest_Api
  Rest_Client ..> Rest_Error
  Rest_Client ..> Rest_Response
  Rest_Client ..> Rest_ResponseInterface
  Rest_Endpoint ..> Option
  Rest_Endpoint ..> Rest_Client
  Rest_Endpoint ..> Settings
  Rest_Endpoint <|-- Integration_ApiStatus
  Rest_Endpoint <|-- Integration_AvailableCurrencies
  Rest_Endpoint <|-- Integration_EstimatedPrice
  Rest_Endpoint <|-- Integration_MinimumPaymentAmount
  Rest_Endpoint <|-- Integration_Payment
  Rest_Endpoint <|-- Integration_PaymentStatus
  Rest_EndpointGetInterface ..> Rest_ResponseInterface
  Rest_EndpointGetInterface <|-- Integration_ApiStatus
  Rest_EndpointGetInterface <|-- Integration_AvailableCurrencies
  Rest_EndpointGetInterface <|-- Integration_EstimatedPrice
  Rest_EndpointGetInterface <|-- Integration_MinimumPaymentAmount
  Rest_EndpointGetInterface <|-- Integration_PaymentStatus
  Rest_EndpointInterface ..> Rest_Client
  Rest_EndpointInterface <|-- Rest_Endpoint
  Rest_EndpointPostInterface ..> Rest_ResponseInterface
  Rest_EndpointPostInterface <|-- Integration_Payment
  Rest_ResponseInterface <|-- Rest_Error
  Rest_ResponseInterface <|-- Rest_Response
  Services_ApiStatusService ..> Integration_ApiStatus
  Services_AvailableCurrenciesService ..> Integration_AvailableCurrencies
  Settings ..> Option
  Settings ..> OptionsPage
@enduml
