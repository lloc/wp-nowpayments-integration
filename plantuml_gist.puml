@startuml class-diagram
  class "Settings" as Settings {
    {static} +admin_init()
    {static} +render_section(args)
    {static} +render_fields(args)
    {static} +sanitize_text_field(fields)
  }
  class "Option" as Option {
    +value : string
    +__construct(key)
    +get()
  }
  class "Plugin" as Plugin {
    -file : string
    +__construct(file)
    {static} +init(file)
    +plugins_loaded()
    {static} +wp_dashboard_setup()
    +widgets_init()
    +block_init()
    {static} +block_render()
    +plugins_url(path)
    +dirname(path)
    +path()
    +url()
  }
  class "Widget" as Widget {
    +__construct()
    +widget(args, instance)
    +update(new_instance, old_instance)
    +form(instance)
  }
  class "AdminWidget" as AdminWidget {
    #status : ApiStatus
    +__construct(status)
    {static} +create(status)
    +render()
  }
  class "OptionsPage" as OptionsPage {
    {static} +admin_menu()
    {static} +render_page()
    {static} +add_settings_error(arr)
  }
  package Integration as Integration {
    class "EstimatedPrice" as Integration_EstimatedPrice {
      +set(amount, currency_from, currency_to)
      +get()
    }
    class "Payment" as Integration_Payment {
      +set(price_amount, price_currency, pay_currency, optional_params)
      +post()
    }
    class "AvailableCurrencies" as Integration_AvailableCurrencies {
      +get()
      +is_available(currency)
    }
    class "MinimumPaymentAmount" as Integration_MinimumPaymentAmount {
      +set(currency_from, currency_to)
      +get()
    }
    class "ApiStatus" as Integration_ApiStatus {
      +get()
    }
    class "PaymentStatus" as Integration_PaymentStatus {
      +set(payment_id)
      +get()
    }
  }
  package Logs as Logs {
    class "StructuredLogsFormatter" as Logs_StructuredLogsFormatter {
      +format(record)
    }
    class "LogFactory" as Logs_LogFactory {
      {static} +get_logger()
    }
    class "ApplicationLogs" as Logs_ApplicationLogs {
      #logger : Logger
      +__construct(logger)
      {static} +init(logger)
      +http_api_debug(response, context, transport, parsed_args, url)
    }
  }
  package Rest as Rest {
    class "Response" as Rest_Response {
      #response : string[]
      +__construct(response)
      +get()
    }
    class "Service" as Rest_Service {
      -environment : string
      +__construct(environment)
      {static} +create()
      +get_service_url()
      +get(method)
      +info()
    }
    interface "Result" as Rest_Result {
      +get()
    }
    class "Error" as Rest_Error {
      #error : WP_Error
      +__construct(error)
      +get()
    }
    class "Endpoint" as Rest_Endpoint {
      -header : string[]
      -body : string[]
      #client : Client
      +__construct(client)
      +get_client()
      #get_headers()
      #set_header(params)
      #get_body()
      #set_body(params)
      +__call(name, arguments)
    }
    class "Client" as Rest_Client {
      -service : Service
      +__construct(service)
      +get_service()
      +get(endpoint, body, headers)
      +post(endpoint, body, headers)
    }
  }
  AdminWidget ..> AdminWidget
  AdminWidget ..> Integration_ApiStatus
  Integration_EstimatedPrice ..> Rest_Endpoint
  Integration_MinimumPaymentAmount ..> Rest_Endpoint
  Integration_Payment ..> Rest_Endpoint
  Integration_PaymentStatus ..> Rest_Endpoint
  Logs_ApplicationLogs ..> Logs_ApplicationLogs
  Logs_LogFactory ..> Logs_StructuredLogsFormatter
  OptionsPage ..> Plugin
  OptionsPage ..> Settings
  Plugin ..> AdminWidget
  Plugin ..> Integration_ApiStatus
  Plugin ..> OptionsPage
  Plugin ..> Plugin
  Plugin ..> Rest_Client
  Plugin ..> Rest_Service
  Plugin ..> Settings
  Plugin ..> Widget
  Rest_Client ..> Rest_Error
  Rest_Client ..> Rest_Response
  Rest_Client ..> Rest_Result
  Rest_Client ..> Rest_Service
  Rest_Endpoint ..> Option
  Rest_Endpoint ..> Rest_Client
  Rest_Endpoint ..> Settings
  Rest_Endpoint <|-- Integration_ApiStatus
  Rest_Endpoint <|-- Integration_AvailableCurrencies
  Rest_Endpoint <|-- Integration_EstimatedPrice
  Rest_Endpoint <|-- Integration_MinimumPaymentAmount
  Rest_Endpoint <|-- Integration_Payment
  Rest_Endpoint <|-- Integration_PaymentStatus
  Rest_Result <|-- Rest_Error
  Rest_Result <|-- Rest_Response
  Rest_Service ..> Rest_Service
  Settings ..> Option
  Settings ..> OptionsPage
@enduml
